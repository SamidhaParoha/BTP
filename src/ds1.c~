/*This modules takes initial simulation table as input perform iterations and then return final simulation table */
   //findingsrf(M0, M1, entries,enties1, pair, inputch, outputch, count);
   /*check(0,1,entries,entries1,count,0);
   check(1,2,entries,entries1,count,1);
   check(2,3,entries,entries1,count,0);
   
   check(3,2,entries,entries1,count,1);
   printf("\n ********* DS SIR LOVE U **************\n");
   write_lists((entries[0].member)->term1);printf("\t");printf("\n");
   write_lists((entries[1].member)->term1);printf("\t");write_lists((entries[1].member)->term2);printf("\n");
   write_lists((entries[2].member)->term1);printf("\t");write_lists((entries[2].member)->term2);printf("\n");
   write_lists(((entries[2].member)->next)->term1);printf("\t");write_lists(((entries[2].member)->next)->term2);printf("\n");
   write_lists((entries[3].member)->term1);printf("\t");write_lists((entries[3].member)->term2);printf("\n");*/
   check(0,1,entries,entries1,count,0);
   check(1,2,entries,entries1,count,0);
   check(2,2,entries,entries1,count,1);
   check(2,3,entries,entries1,count,0);
   printf("\n ********* DS SIR LOVE U **************\n");
   write_lists((entries[0].member)->term1);printf("\t");printf("\n");
   write_lists((entries[1].member)->term1);printf("\t");write_lists((entries[1].member)->term2);printf("\n");
   write_lists((entries[2].member)->term1);printf("\t");write_lists((entries[2].member)->term2);printf("\n");
   write_lists(((entries[2].member)->next)->term1);printf("\t");write_lists(((entries[2].member)->next)->term2);printf("\n");
   write_lists((((entries[2].member)->next)->next)->term1);printf("\t");write_lists((((entries[2].member)->next)->next)->term2);printf("\n");
   write_lists((entries[3].member)->term1);printf("\t");write_lists((entries[3].member)->term2);printf("\n");
